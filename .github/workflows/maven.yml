# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install
    - name: Docker login with credentials
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Print credentials.
      run: |
        echo username
        echo password
    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-starter-web:${{ github.sha }} .
        docker tag ${{ secrets.DOCKER_USERNAME }}/springboot-starter-web:${{ github.sha }} \
                   ${{ secrets.DOCKER_USERNAME }}/springboot-starter-web:latest
    - name: Push Docker Image To Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/springboot-starter-web:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/springboot-starter-web:latest
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Deploy To Local Minikube
        run: |
          kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
          minikube kubectl -- apply -f k8s/mongo-deployment.yaml
          minikube kubectl -- apply -f k8s/mongo-service.yaml
          minikube kubectl -- apply -f k8s/springboot-mongodb-deployment.yaml
          minikube kubectl -- apply -f k8s/springboot-mongodb-service.yaml
          

    
  
        
      
      
    
    
